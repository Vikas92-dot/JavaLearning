1. Payment Gateway Interface
Objective: Create a program to simulate payment processing using different payment methods.
1.
Create an interface PaymentGateway with a method processPayment(double amount).
Implement the interface in classes CreditCardPayment and UPIPayment.
Write a driver class to test the functionality by accepting the payment method from the user and processing the payment.

2.
2. Shape Area Calculator
Objective: Calculate the area of different shapes using a common interface.

Define an interface Shape with a method calculateArea().
Create classes Circle and Rectangle that implement the Shape interface. 
Input dimensions and calculate the area of each shape.

3.
 Library Management System
Objective: Manage library operations using an interface.

Define an interface LibraryOperations with methods issueBook() and returnBook().
Implement the interface in Student and Teacher classes.
Demonstrate how students and teachers interact with the library differently.

==========================================================================================================================

Problem Statement

Oviya is fascinated by automorphic numbers and wants to create a program to determine whether a given number is an automorphic number or not.

An automorphic number is a number whose square ends with the same digits as the number itself. For example, 25 = (25)2 = 625 

Oviya has defined two interfaces, NumberInput for taking user input and AutomorphicChecker for checking if a given number is automorphic. 
The class AutomorphicNumber implements both interfaces.

Help her to complete the task.
Input format :
The input consists of a single integer n.
Output format :
If the input number is an automorphic number, print "n is an automorphic number".
Otherwise, print "n is not an automorphic number".

Refer to the sample output for formatting specifications.
Code constraints :
1 ≤ n ≤ 500
Sample test cases :
Input 1 :
25
Output 1 :
25 is an automorphic number
Input 2 :
7
Output 2 :
7 is not an automorphic number

===============================================================================================================================

Problem Statement

John is developing a car loan calculator and has structured his program using two interfaces, Principal and InterestRate, 
defining methods for principal and interest rate retrieval.

The Loan class implements these interfaces, taking principal and annual interest rates as parameters. User input is solicited for these values, 
and the program ensures their validity before performing calculations. If input values are invalid (less than or equal to zero), an error message is displayed.

Note: Total interest = principal * interest rate * years
Input format :
The first line of input consists of a double value P, representing the principal.
The second line consists of a double value R, representing the annual interest rate.
The third line consists of an integer value N, representing the loan duration in years.
Output format :
If the input values are valid, print "Total interest paid: Rs. " followed by a double value, representing the total interest paid, rounded off to two decimal places.
If the input values are invalid (negative or zero values for principal, annual interest rate, or loan duration), print "Invalid input values!".

Refer to the sample output for formatting specifications.
Code constraints :
In this scenario, the test cases fall under the following constraints:
0.00 < P < 10,00,000.00
0.01 ≤ R ≤ 0.99
0 < N < 25
Sample test cases :
Input 1 :
20000.00
0.05
5
Output 1 :
Total interest paid: Rs.5000.00
Input 2 :
45000.25
0
2
Output 2 :
Invalid input values!
Note :
The program will be evaluated only after the “Submit Code” is clicked.
Extra spaces and new line characters in the program output will result in the failure of the test case.