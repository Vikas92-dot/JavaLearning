1.
Problem Statement:
You are tasked with designing a system to manage a set of appliances. Each appliance has common characteristics and behaviors, 
but their operation may differ based on the type of appliance. Use abstract classes to model this system.

Instructions:
Abstract Class Design

Create an abstract class named Appliance with the following:
Fields:
String brand
boolean isOn
Constructor to initialize brand and set isOn to false initially.
Abstract method operate(): Defines the specific operation of an appliance.
Concrete methods:
turnOn(): Sets isOn to true and prints "The appliance is now ON."
turnOff(): Sets isOn to false and prints "The appliance is now OFF."
Subclasses

Create two subclasses of Appliance:
WashingMachine:
Override the operate() method to print "The washing machine is washing clothes."
Refrigerator:
Override the operate() method to print "The refrigerator is cooling items."
Driver Class

Create a Main class to:
Instantiate a WashingMachine and a Refrigerator.
Turn on each appliance and call their operate() method.
Turn off each appliance.


O/p:
Washing Machine:
The appliance is now ON.
The washing machine is washing clothes.
The appliance is now OFF.

Refrigerator:
The appliance is now ON.
The refrigerator is cooling items.
The appliance is now OFF.

2.
Scenario 1: Payment Processing System
You are developing a payment processing system to handle various payment methods.

Abstract Class:

Create an abstract class Payment with the following:
Fields:
double amount
String transactionID
Constructor to initialize the fields.
Abstract method processPayment().
Concrete method displayDetails() to print the transaction ID and amount.
Subclasses:

Create the following subclasses:
CreditCardPayment:
Additional field: String cardNumber.
Override processPayment() to print "Processing credit card payment for amount: $[amount].".
PaypalPayment:
Additional field: String paypalID.
Override processPayment() to print "Processing PayPal payment for amount: $[amount]."
Main Class:

Create instances of both CreditCardPayment and PaypalPayment.
Call processPayment() and displayDetails() for each object.

3.
Online Learning Platform:
You are tasked with modeling a course management system.

Abstract Class:

Create an abstract class Course with the following:
Fields:
String courseName
int duration (in weeks)
Constructor to initialize fields.
Abstract method showContent().
Concrete method displayDetails() to print the course name and duration.
Subclasses:

Create the following subclasses:
ProgrammingCourse:
Additional field: String language.
Override showContent() to print "This course covers programming in [language]."
DesignCourse:
Additional field: String tool.
Override showContent() to print "This course focuses on design using [tool]."
Main Class:

Create objects of ProgrammingCourse and DesignCourse.
Call showContent() and displayDetails() for each course.


4.
 Library Management System
You are designing a library system to manage books and media.

Abstract Class:

Create an abstract class LibraryItem with the following:
Fields:
String title
String author
Constructor to initialize fields.
Abstract method checkout().
Abstract method returnItem().
Concrete method displayInfo() to print the title and author.
Subclasses:

Create the following subclasses:
Book:
Additional field: int pages.
Override checkout() to print "Checking out book: [title]."
Override returnItem() to print "Returning book: [title]."
DVD:
Additional field: int duration (in minutes).
Override checkout() to print "Checking out DVD: [title]."
Override returnItem() to print "Returning DVD: [title]."
Main Class:

Create objects of Book and DVD.
Call checkout(), returnItem(), and displayInfo() for each item.

===============================================================================================

Problem Statement

Jessica is tasked with designing a fantasy game character system. The system includes an abstract class named GameCharacter with two abstract methods: 
attack() and defend(). 

Two subclasses, Warrior and Wizard, extend the GameCharacter class. 

The program prompts the player to choose a character class (1. Warrior, 2. Wizard) and input their character's strength or magic power. 
The dynamic calculations involve tripling the strength (strength * 3) for the Warrior's attack and doubling the magic power(power * 2) for the Wizard's attack.

Jessica needs your help in completing the program. Help her finish it.
Input format :
The first line of input consists of an integer, representing the choice of the character - 1 for Warrior and 2 for Wizard.
If the choice is 1, the second line consists of an integer N, representing the strength.
If the choice is 2, the second line consists of an integer M, representing the magic power.
Output format :
If the choice is 1, the output displays the actions of a warrior in the following format:
"Warrior Actions:
Attack: Powerful sword slash for [result] damage!
Defend: Raises shield, defence boosted by [N]!"

If the choice is 2, the output displays the actions of a wizard in the following format:
"Wizard Actions:
Attack: Casts spell, deals [result] magical damage!
Defend: Creates magical barrier, defence boosted by [M]!"

If any other choice is given, print "Invalid choice".

Refer to the sample output for formatting specifications.
Code constraints :
1 ≤ M, N ≤ 106
Sample test cases :
Input 1 :
1
68
Output 1 :
Warrior Actions:
Attack: Powerful sword slash for 204 damage!
Defend: Raises shield, defence boosted by 68!
Input 2 :
2
998
Output 2 :
Wizard Actions:
Attack: Casts spell, deals 1996 magical damage!
Defend: Creates magical barrier, defence boosted by 998!
Input 3 :
3
76
Output 3 :
Invalid choice